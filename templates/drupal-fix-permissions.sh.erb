#!/bin/bash

# Help menu
print_help() {
cat <<-HELP
This script is used to fix permissions of a Drupal installation
you need to provide the following arguments:

  1) Path to your Drupal installation.
  2) Username of the user that you want to give files/directories ownership.
  3) HTTPD group name (defaults to www-data for Apache).

Usage: (sudo) bash ${0##*/} --drupal_path=PATH --drupal_user=USER --httpd_group=GROUP
Example: (sudo) bash ${0##*/} --drupal_path=/usr/local/apache2/htdocs --drupal_user=john --httpd_group=www-data
HELP
exit 0
}

# Tests the existance of commands on server.
# Used to check if restorecon is available.
command_exists () {
    command -v $1 >/dev/null 2>&1;
}

if [ $(id -u) != 0 ]; then
  printf "**************************************\n"
  printf "* Error: You must run this with sudo or root*\n"
  printf "**************************************\n"
  print_help
  exit 1
fi

drupal_path=$PWD
drupal_user=${2}
httpd_group="${3:-www-data}"
# Assume drupal 7
dversion=7

# Parse Command Line Arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --drupal_path=*)
        drupal_path="${1#*=}"
        ;;
    --drupal_user=*)
        drupal_user="${1#*=}"
        ;;
    --httpd_group=*)
        httpd_group="${1#*=}"
        ;;
    --help) print_help;;
    *)
      printf "***********************************************************\n"
      printf "* Error: Invalid argument, run --help for valid arguments. *\n"
      printf "***********************************************************\n"
      exit 1
  esac
  shift
done

if [ -z "${drupal_path}" ] || [ ! -d "${drupal_path}/sites" ] || [ ! -f "${drupal_path}/core/modules/system/system.module" ] && [ ! -f "${drupal_path}/modules/system/system.module" ]; then
  printf "*********************************************\n"
  printf "* Error: Please provide a valid Drupal path. *\n"
  printf "*********************************************\n"
  print_help
  exit 1
fi

if [ -z "${drupal_user}" ] || [[ $(id -un "${drupal_user}" 2> /dev/null) != "${drupal_user}" ]]; then
  printf "*************************************\n"
  printf "* Error: Please provide a valid user. *\n"
  printf "*************************************\n"
  print_help
  exit 1
fi

printf "Checking Drupal version at "${drupal_path}"... ";
dversion=$(drush core-status --format=json --root=${drupal_path} | jq '."drupal-version"' --raw-output | awk -F. '{print $1}')
printf "Detected: "

# Check which version we have.
if [[ "$dversion" -eq 8 ]]; then
  printf "Drupal 8.\n";
elif [[ "$dversion" -eq 7 ]]; then
  printf "Drupal 7.\n"
elif [[ "$dversion" -eq 9 ]]; then
  printf "Drupal 9.\n";
else
  printf "Drupal version was not detected.\n"
  exit 1
fi

cd $drupal_path

# Composer vendor.
if [ -d "${drupal_path}/../vendor" ]; then
  # Since there's a parent folder, revoke other's privileges.
  printf "Revoking 'other' user access to parent directory "${drupal_path}/.." \n" && \
  chmod -R o-rwx ${drupal_path}/.. &
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n" && \
  chown ${drupal_user}:${drupal_user} ${drupal_path}/../*
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/../*

  printf "Changing ownership of "vendor" directories in "${drupal_path}/../vendor" \n" && \
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../vendor
  find ${drupal_path}/../vendor -type d ! -name . -exec chmod g=rx '{}' +
  chmod g=rx ${drupal_path}/../vendor

  if [ -d "${drupal_path}/../vendor/bin" ]; then
    printf "Changing permissions of "vendor/bin" directories in "${drupal_path}/../vendor/bin" to "u+x"...\n" && \
    chmod -R u+x ${drupal_path}/../bin &
  fi

fi

# Bin directories.
if [ -d "${drupal_path}/../bin" ]; then
  printf "Changing permissions of "bin" directories in "${drupal_path}/../bin" to "u+x"...\n" && \
  chmod -R u+x ${drupal_path}/../bin &
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n" && \
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..

fi

# Composer.json file.
if [ -f "${drupal_path}/../composer.json" ]; then
  printf "Changing permissions of "composer.json" in "${drupal_path}/../" to "rw-r-----"...\n" && \
  chmod 640 ${drupal_path}/../composer.json
  chown ${drupal_user}:${httpd_group} ${drupal_path}/../composer.json
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n" && \
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..

  if [ -f "${drupal_path}/../.env" ]; then
    chmod 640 ${drupal_path}/../.env
    chown ${drupal_user}:${httpd_group} ${drupal_path}/../.env
  fi
fi

# Load environment file.
if [ -f "${drupal_path}/../load.environment.php" ]; then
  printf "Changing permissions of "load.environment.php" in "${drupal_path}/../" to "rw-r-----"...\n" && \
  chmod 640 ${drupal_path}/../load.environment.php
  chown ${drupal_user}:${httpd_group} ${drupal_path}/../load.environment.php
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n" && \
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..

  if [ -f "${drupal_path}/../.env" ]; then
    chmod 640 ${drupal_path}/../.env
    chown ${drupal_user}:${httpd_group} ${drupal_path}/../.env
  fi
fi

# Configuration directories.
if [ "$dversion" -ge 8 ] && [ -d "${drupal_path}/../config" ]; then
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../config &
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n" && \
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..
  
  printf "Changing permissions of all directories inside "${drupal_path}/../config" to "rwxr-x---"...\n"  && \
  find ${drupal_path}/../config -type d ! -name . -exec chmod u=rwx,g=rx,o= '{}' +

  printf "Changing permissions of all files inside "${drupal_path}/../config" to "rw-r-----"...\n"  && \
  find ${drupal_path}/../config -type f -exec chmod u=rw,g=r,o= '{}' +

fi

# Drush directories.
if [ -d "${drupal_path}/../drush" ]; then
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../drush &
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n"
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..
  
  printf "Changing permissions of all directories inside "${drupal_path}/../drush" to "rwxr-x---"...\n"
  find ${drupal_path}/../drush -type d ! -name . -exec chmod u=rwx,g=rx,o= '{}' +

  printf "Changing permissions of all files inside "${drupal_path}/../drush" to "rw-r-----"...\n"
  find ${drupal_path}/../drush -type f -exec chmod u=rw,g=r,o= '{}' +

fi

# Saml directories.
if [ -d "${drupal_path}/../samlconf" ]; then
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../samlconf &
  # Set the right permissions.
  printf "Grant access to apache to parent folder "${drupal_path}/.." \n"
  chown ${drupal_user}:${httpd_group} ${drupal_path}/..
  chmod u=rwx,g=rx,o= ${drupal_path}/..
  
  printf "Changing permissions of all directories inside "${drupal_path}/../samlconf" to "rwxr-x---"...\n"
  find ${drupal_path}/../samlconf -type d ! -name . -exec chmod u=rwx,g=rx,o= '{}' +

  printf "Changing permissions of all files inside "${drupal_path}/../samlconf" to "rw-r-----"...\n"
  find ${drupal_path}/../samlconf -type f -exec chmod u=rw,g=r,o= '{}' +

fi


# Restore SELinux modes for all directories.
command_exists restorecon && \
  printf "Restoring SeLinux file contexts, please wait...\n" && \
  restorecon -RF ${drupal_path}/../ &

printf "Changing ownership of all contents of "${drupal_path}":\n user => "${drupal_user}" \t group => "${httpd_group}"\n" && \
chown -R ${drupal_user}:${httpd_group} . &

printf "Changing permissions of all files inside "${drupal_path}" to "rw-r-----"...\n"  && \
find . -type f -exec chmod u=rw,g=r,o= '{}' +

# We pause parallel running here because the permissions need to set first before we move on to the sites directories.
printf "Changing permissions of all directories inside "${drupal_path}" to "rwxr-x---"...\n" && \
find . -type d -not -path "./sites/*/files" ! -name . -exec chmod u=rwx,g=rx,o= '{}' +
chmod u=rwx,g=rx,o= $drupal_path

printf "Changing permissions of "files" directories in "${drupal_path}/sites" to "rwxrwx---"...\n"

cd sites

# Todo: Ask drush where the files are and set the perms there.
printf "Changing permissions of all files inside all "files" directories in "${drupal_path}/sites" to "rw-rw----"...\n" && \
printf "Changing permissions of all directories inside all "files" directories in "${drupal_path}/sites" to "rwxrwx---"...\n" && \
for x in ./*/files; do
  find ${x} -type d -exec chmod ug=rwx,o= '{}' +
  # Don't need to set non-directory perms as they're already set above.
done


# Set permissions on private files path.
# Ask drush where the files directories are.
cd $drupal_path
private_files_path="$(drush status | grep Private | grep -oP '[:][ ]+\K([^: ]*)')"
if [ "$private_files_path" ] && [ -d "$private_files_path" ] && [ "$private_files_path" != "/" ]; then
  chown -R ${drupal_user}:${httpd_group} ${private_files_path} &
  printf "Changing permissions of all files inside private files directory ${private_files_path} to rw-rw----...\n" && \
  printf "Changing permissions of private files directory and all directories inside ${private_files_path} to rwxrwx---...\n" && \
  chmod u=rwx,g=rwx,o= ${private_files_path}
  find ${private_files_path} -type d -exec chmod u=rwx,g=rwx,o= '{}' +
  find ${private_files_path} -not -type d -exec chmod u=rw,g=rw,o= '{}' +
  # Restore SELinux modes for private files directory.
  command_exists restorecon && \
    printf "Restoring SeLinux file contexts for ${private_files_path}, please wait...\n" && \
    restorecon -RF ${private_files_path} &
fi


# Check permissions for supporting directories.
if [ "$dversion" -eq 7 ] && [ -d "${drupal_path}/sites/all/vendor/bin" ]; then
  printf "Changing permissions of "vendor/bin" directories in "${drupal_path}/sites/all/vendor/bin" to "u+x"...\n" && \
  chmod -R u+x ${drupal_path}/sites/all/vendor/bin &
fi

# Wait for subprocesses to finish.
wait
echo "Done setting proper permissions on files and directories."
exit 0
