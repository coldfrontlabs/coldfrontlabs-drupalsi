#!/bin/bash

# Help menu
print_help() {
cat <<-HELP
This script is used to fix permissions of a Drupal installation
you need to provide the following arguments:

  1) Path to your Drupal installation.
  2) Username of the user that you want to give files/directories ownership.
  3) HTTPD group name (defaults to www-data for Apache).

Usage: (sudo) bash ${0##*/} --drupal_path=PATH --drupal_user=USER --httpd_group=GROUP
Example: (sudo) bash ${0##*/} --drupal_path=/usr/local/apache2/htdocs --drupal_user=john --httpd_group=www-data
HELP
exit 0
}

# Tests the existance of commands on server.
# Used to check if restorecon is available.
command_exists () {
    command -v $1 >/dev/null 2>&1;
}

if [ $(id -u) != 0 ]; then
  printf "**************************************\n"
  printf "* Error: You must run this with sudo or root*\n"
  printf "**************************************\n"
  print_help
  exit 1
fi

drupal_path=$PWD
drupal_user=${2}
httpd_group="${3:-www-data}"
# Assume drupal 7
dversion=7

# Parse Command Line Arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --drupal_path=*)
        drupal_path="${1#*=}"
        ;;
    --drupal_user=*)
        drupal_user="${1#*=}"
        ;;
    --httpd_group=*)
        httpd_group="${1#*=}"
        ;;
    --help) print_help;;
    *)
      printf "***********************************************************\n"
      printf "* Error: Invalid argument, run --help for valid arguments. *\n"
      printf "***********************************************************\n"
      exit 1
  esac
  shift
done

if [ -z "${drupal_path}" ] || [ ! -d "${drupal_path}/sites" ] || [ ! -f "${drupal_path}/core/modules/system/system.module" ] && [ ! -f "${drupal_path}/modules/system/system.module" ]; then
  printf "*********************************************\n"
  printf "* Error: Please provide a valid Drupal path. *\n"
  printf "*********************************************\n"
  print_help
  exit 1
fi

if [ -z "${drupal_user}" ] || [[ $(id -un "${drupal_user}" 2> /dev/null) != "${drupal_user}" ]]; then
  printf "*************************************\n"
  printf "* Error: Please provide a valid user. *\n"
  printf "*************************************\n"
  print_help
  exit 1
fi

printf "Checking Drupal version at "${drupal_path}"... ";
dversion=$(drush core-status --format=json --root=${drupal_path} | jq '."drupal-version"' --raw-output | awk -F. '{print $1}')
printf "Detected: "

# Check which version we have.
if [[ "$dversion" -eq 8 ]]; then
  printf "Drupal 8.\n";
elif [[ "$dversion" -eq 7 ]]; then
  printf "Drupal 7.\n"
else
  printf "Drupal version was not detected.\n"
  exit 1
fi

cd $drupal_path

printf "Changing ownership of all contents of "${drupal_path}":\n user => "${drupal_user}" \t group => "${httpd_group}"\n"
chown -R ${drupal_user}:${httpd_group} .

printf "Changing permissions of all directories inside "${drupal_path}" to "rwXr-X---"...\n"
find . -type d ! -name . -exec chmod u=rwX,g=rX,o= '{}' \;

printf "Changing permissions of all files inside "${drupal_path}" to "rw-r-----"...\n"
find . -type f -exec chmod u=rw,g=r,o= '{}' \;

printf "Changing permissions of "files" directories in "${drupal_path}/sites" to "rwXrwX---"...\n"
cd sites
find . -type d -name files -exec chmod ug=rwX,o= '{}' \;
printf "Changing permissions of all files inside all "files" directories in "${drupal_path}/sites" to "rw-rw----"...\n"
printf "Changing permissions of all directories inside all "files" directories in "${drupal_path}/sites" to "rwXrwX---"...\n"
for x in ./*/files; do
  find ${x} -type d -exec chmod ug=rwX,o= '{}' \;
  find ${x} -type f -exec chmod ug=rw,o= '{}' \;
done

# Check permissions for supporting directories.

# Composer vendor.
if [ -d "${drupal_path}/../vendor" ]; then
  printf "Changing ownership of "vendor" directories in "${drupal_path}/../vendor" \n"
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../vendor

  if [ -d "${drupal_path}/../vendor/bin" ]; then
    printf "Changing permissions of "vendor/bin" directories in "${drupal_path}/../vendor/bin" to "u+x"...\n"
    chmod -R u+x ${drupal_path}/../bin
  fi

  command_exists restorecon && \
    printf "Restoring SeLinux file contexts, please wait...\n" && \
    restorecon -RF ${drupal_path}/../vendor
fi

if [ "$dversion" -eq 7 ] && [ -d "${drupal_path}/sites/all/vendor/bin" ]; then
  printf "Changing permissions of "vendor/bin" directories in "${drupal_path}/sites/all/vendor/bin" to "u+x"...\n"
  chmod -R u+x ${drupal_path}/sites/all/vendor/bin
fi

# Bin directories.
if [ -d "${drupal_path}/../bin" ]; then
  printf "Changing permissions of "bin" directories in "${drupal_path}/../bin" to "u+x"...\n"
  chmod -R u+x ${drupal_path}/../bin

  command_exists restorecon && \
    printf "Restoring SeLinux file contexts, please wait...\n" && \
    restorecon -RF ${drupal_path}/../bin
fi

# Configuration directories.
if [ "$dversion" -eq 8 ] && [ -d "${drupal_path}/../config" ]; then
  chown -R ${drupal_user}:${httpd_group} ${drupal_path}/../config
  
  printf "Changing permissions of all directories inside "${drupal_path}/../config" to "rwXr-X---"...\n"
  find ${drupal_path}/../config -type d ! -name . -exec chmod u=rwX,g=rX,o= '{}' \;

  printf "Changing permissions of all files inside "${drupal_path}/../config" to "rw-r-----"...\n"
  find ${drupal_path}/../config -type f -exec chmod u=rw,g=r,o= '{}' \;

  command_exists restorecon && \
    printf "Restoring SeLinux file contexts, please wait...\n" && \
    restorecon -RF ${drupal_path}/../config
fi

command_exists restorecon && \
  printf "Restoring SeLinux file contexts, please wait...\n" && \
  restorecon -RF ${drupal_path}

echo "Done setting proper permissions on files and directories."
exit 0
