#!/bin/bash

# Help menu
print_help() {
cat <<-HELP
This script is used to fix permissions of a Drupal installation
you need to provide the following arguments:

  1) Path to your Drupal installation.
  2) Username of the user that you want to give files/directories ownership.
  3) HTTPD group name (defaults to www-data for Apache).

Usage: (sudo) bash ${0##*/} --drupal_path=PATH --drupal_user=USER --httpd_group=GROUP
Example: (sudo) bash ${0##*/} --drupal_path=/usr/local/apache2/htdocs --drupal_user=john --httpd_group=www-data
HELP
exit 0
}

# Tests the existance of commands on server.
# Used to check if restorecon is available.
command_exists () {
    command -v $1 >/dev/null 2>&1;
}

if [ $(id -u) != 0 ]; then
  printf "**************************************\n"
  printf "* Error: You must run this with sudo or root*\n"
  printf "**************************************\n"
  print_help
  exit 1
fi

drupal_path=$PWD
drupal_user=${2}
httpd_group="${3:-www-data}"
# Assume drupal 7
drupal_version=7

# Parse Command Line Arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --drupal_path=*)
        drupal_path="${1#*=}"
        ;;
    --drupal_user=*)
        drupal_user="${1#*=}"
        ;;
    --httpd_group=*)
        httpd_group="${1#*=}"
        ;;
    --help) print_help;;
    *)
      printf "***********************************************************\n"
      printf "* Error: Invalid argument, run --help for valid arguments. *\n"
      printf "***********************************************************\n"
      exit 1
  esac
  shift
done

if [ -z "${drupal_path}" ] || [ ! -d "${drupal_path}/sites" ] || [ ! -f "${drupal_path}/core/modules/system/system.module" ] && [ ! -f "${drupal_path}/modules/system/system.module" ]; then
  printf "*********************************************\n"
  printf "* Error: Please provide a valid Drupal path. *\n"
  printf "*********************************************\n"
  print_help
  exit 1
fi

if [ -z "${drupal_user}" ] || [[ $(id -un "${drupal_user}" 2> /dev/null) != "${drupal_user}" ]]; then
  printf "*************************************\n"
  printf "* Error: Please provide a valid user. *\n"
  printf "*************************************\n"
  print_help
  exit 1
fi

printf "Checking Drupal version at "${drupal_path}"... ";
drupal_version=$(drush core-status --format=json --root=${drupal_path} | jq '."drupal-version"' --raw-output | awk -F. '{print $1}')
printf "drupal_version: "${drupal_version}

if [[ "$drupal_version" -eq 8 ]]; then
  # Set paths to operate on.
  drupal8_root=${drupal_path%/*} #/syntax highlight bugfix.
  d8_config=${drupal8_root}/config
  d8_scripts=${drupal8_root}/scripts
  d8_vendor=${drupal8_root}/vendor
  printf "Drupal 8 was detected.\n";
elif [[ "$drupal_version" -eq 7 ]]; then
  printf "Drupal 7 was detected.\n"
else
  printf "Drupal version was not detected.\n"
  exit 1
fi

# Operate on D7 sites at drupal dir path, or D8 at one level up.
if [[ "$drupal_version" -eq 7 ]]; then
  cd $drupal_path
elif [[ "$drupal_version" -eq 8 ]]; then
  cd $drupal8_root
fi

printf "Changing ownership of all contents of "${drupal_path}":\n user => "${drupal_user}" \t group => "${httpd_group}"\n"
chown -R ${drupal_user}:${httpd_group} .

printf "Changing permissions of all directories inside "${drupal_path}" to "rwxr-x---"...\n"
find . -type d ! -name . -exec chmod u=rwx,g=rx,o= '{}' \;

printf "Changing permissions of all files inside "${drupal_path}" to "rw-r-----"...\n"
find . -type f -exec chmod u=rw,g=r,o= '{}' \;

# D8 Specific vendor/bin permissions
if [[ "$drupal_version" -eq 8 ]]; then
  printf "Changing permissions of "vendor/bin" directories in "${d8_vendor}" to "rwxr-----"...\n"
  chmod u+x ${d8_vendor}/bin/* || true
fi

# For D7 or D8 ensure we are now operating within the actual drupal dir.
cd $drupal_path

printf "Changing permissions of "files" directories in "${drupal_path}/sites" to "rwxrwx---"...\n"
cd sites
find . -type d -name files -exec chmod ug=rwx,o= '{}' \;

printf "Changing permissions of "vendor/bin" directories in "${drupal_path}/sites/all/vendor/bin" to "rwxr-----"...\n"
chmod u+x all/vendor/bin/* || true

printf "Changing permissions of all files inside all "files" directories in "${drupal_path}/sites" to "rw-rw----"...\n"
printf "Changing permissions of all directories inside all "files" directories in "${drupal_path}/sites" to "rwxrwx---"...\n"
for x in ./*/files; do
  find ${x} -type d -exec chmod ug=rwx,o= '{}' \;
  find ${x} -type f -exec chmod ug=rw,o= '{}' \;
done

if ! command_exists restorecon ; then
	# Nothing further to do.
        printf "The restorecon command is not installed on this system. Skipping..."
else
	# We have an SeLinux system with restorecon, run it.
  printf "Restoring SeLinux file contexts, please wait...\n"
    if [[ "$drupal_version" -eq 8 ]]; then
      restorecon -RF $drupal8_root
    else
      restorecon -RF $drupal_path
    fi
fi

echo "Done setting proper permissions on files and directories."

